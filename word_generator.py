#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import re
from typing import List, Set
import json

def get_russian_words() -> Set[str]:
    """Загружает список русских слов из интернета"""
    try:
        # Попробуем загрузить словарь с GitHub
        url = "https://raw.githubusercontent.com/danakt/russian-words/master/russian.txt"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            words = set()
            for line in response.text.split('\n'):
                word = line.strip().lower()
                if len(word) == 5 and re.match(r'^[а-яё]+$', word):
                    words.add(word)
            return words
    except:
        pass
    
    # Если не удалось загрузить, используем расширенный базовый список
    return {
        'абвгд', 'еёжзи', 'йклмн', 'опрст', 'уфхцч', 'шщъыь', 'эюя',
        'метла', 'булка', 'гнула', 'джула', 'жмула', 'звука', 'играл',
        'книга', 'лапша', 'мама', 'ночь', 'окно', 'печь', 'рука',
        'стол', 'тень', 'ухо', 'флаг', 'хлеб', 'царь', 'чай',
        'шар', 'щетка', 'эхо', 'юла', 'яма',
        # Дополнительные 5-буквенные слова
        'вода', 'огонь', 'земля', 'небо', 'море', 'лес', 'поле', 'гора', 'река',
        'город', 'село', 'дом', 'сад', 'путь', 'день', 'год', 'час', 'минута',
        'ветер', 'солнце', 'луна', 'звезда', 'снег', 'дождь', 'облако', 'туча',
        'цветок', 'дерево', 'трава', 'лист', 'корень', 'ветка', 'плод', 'семя',
        'живот', 'птица', 'рыба', 'зверь', 'насекомое', 'бабочка', 'муравей',
        'человек', 'ребенок', 'мальчик', 'девочка', 'мужчина', 'женщина',
        'друг', 'семья', 'брат', 'сестра', 'отец', 'мать', 'бабушка', 'дедушка',
        'учитель', 'врач', 'инженер', 'продавец', 'водитель', 'повар',
        'школа', 'университет', 'больница', 'магазин', 'театр', 'кино',
        'музей', 'библиотека', 'стадион', 'парк', 'площадь', 'улица',
        'дорога', 'мост', 'забор', 'стена', 'окно', 'дверь', 'крыша',
        'стол', 'стул', 'кровать', 'шкаф', 'полка', 'зеркало', 'лампа',
        'книга', 'тетрадь', 'ручка', 'карандаш', 'линейка', 'ножницы',
        'чашка', 'тарелка', 'ложка', 'вилка', 'нож', 'кастрюля', 'сковорода',
        'хлеб', 'молоко', 'сыр', 'мясо', 'рыба', 'яйцо', 'картошка', 'морковь',
        'яблоко', 'груша', 'виноград', 'клубника', 'малина', 'черника',
        'одежда', 'рубашка', 'брюки', 'платье', 'юбка', 'кофта', 'куртка',
        'шапка', 'шарф', 'перчатки', 'ботинки', 'сапоги', 'туфли',
        'игрушка', 'мяч', 'кукла', 'машинка', 'конструктор', 'пазл',
        'игра', 'песня', 'танец', 'рисунок', 'картина', 'фотография',
        'письмо', 'телефон', 'компьютер', 'телевизор', 'радио', 'часы',
        'ключ', 'замок', 'сумка', 'кошелек', 'очки', 'зонт', 'зонтик',
        'велосипед', 'автомобиль', 'поезд', 'самолет', 'корабль', 'лодка',
        'утро', 'день', 'вечер', 'ночь', 'неделя', 'месяц', 'сезон',
        'весна', 'лето', 'осень', 'зима', 'январь', 'февраль', 'март',
        'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь',
        'ноябрь', 'декабрь', 'понедельник', 'вторник', 'среда', 'четверг',
        'пятница', 'суббота', 'воскресенье'
    }

def is_noun(word: str) -> bool:
    """Проверяет, является ли слово существительным"""
    # Слова, которые точно являются существительными
    known_nouns = {
        'метла', 'булка', 'книга', 'лапша', 'мама', 'ночь', 'окно', 
        'печь', 'рука', 'стол', 'тень', 'ухо', 'флаг', 'хлеб', 'царь', 
        'чай', 'шар', 'щетка', 'эхо', 'юла', 'яма', 'парта', 'театр',
        'дом', 'звук', 'игра', 'гнул', 'джул', 'жмул', 'снег', 'дождь',
        'ветер', 'солнце', 'луна', 'звезда', 'вода', 'огонь', 'земля',
        'небо', 'море', 'лес', 'поле', 'гора', 'река', 'город', 'село',
        'дом', 'сад', 'путь', 'день', 'год', 'час', 'минута', 'секунда'
    }
    
    # Если слово в списке известных существительных
    if word in known_nouns:
        return True
    
    # Исключаем прилагательные (слова, заканчивающиеся на -ый, -ой, -ий, -ая, -яя, -ое, -ее)
    if word.endswith(('ый', 'ой', 'ий', 'ая', 'яя', 'ое', 'ее')):
        return False
    
    # Исключаем глаголы (слова, заканчивающиеся на -ть, -ти, -чь, -л, -ла, -ло, -ли)
    if word.endswith(('ть', 'ти', 'чь', 'л', 'ла', 'ло', 'ли')):
        return False
    
    # Исключаем глаголы в повелительном наклонении (-и, -й)
    if word.endswith(('и', 'й')) and len(word) >= 3:
        return False
    
    # Исключаем глаголы с приставками (начинающиеся с по-, за-, под-, над-)
    if word.startswith(('по', 'за', 'под', 'над', 'от', 'до', 'про', 'пере')):
        return False
    
    # Исключаем наречия (слова, заканчивающиеся на -о, -е)
    if word.endswith(('о', 'е')) and len(word) >= 4:
        # Но оставляем короткие существительные
        if len(word) <= 3:
            return True
    
    # Исключаем множественное число (слова, заканчивающиеся на -ы, -и)
    if word.endswith(('ы', 'и')) and len(word) >= 4:
        return False
    
    # Дополнительные проверки для 5-буквенных слов
    if len(word) == 5:
        # Слова, заканчивающиеся на -а, -я, -ь обычно существительные (женский род)
        if word.endswith(('а', 'я', 'ь')):
            return True
        
        # Слова с типичными суффиксами существительных
        if any(suffix in word for suffix in ['ка', 'ка', 'ка', 'ка']):
            return True
        
        # Слова, заканчивающиеся на согласную (мужской род)
        if word[-1] in 'бвгджзйклмнпрстфхцчшщ':
            return True
    
    return False

def is_verb(word: str) -> bool:
    """Проверяет, является ли слово глаголом"""
    # Типичные окончания глаголов
    verb_endings = {
        'ть', 'ти', 'чь',  # инфинитив
        'л', 'ла', 'ло', 'ли',  # прошедшее время
        'ю', 'ешь', 'ет', 'ем', 'ете', 'ют',  # настоящее время
        'и', 'й'  # повелительное наклонение
    }
    
    # Глаголы, которые точно являются глаголами
    known_verbs = {
        'бежать', 'ходить', 'петь', 'читать', 'писать', 'говорить',
        'думать', 'работать', 'играть', 'смотреть', 'слушать',
        'кушать', 'пить', 'спать', 'жить', 'учить', 'знать'
    }
    
    # Если слово в списке известных глаголов
    if word in known_verbs:
        return True
    
    # Проверяем по окончанию
    for ending in verb_endings:
        if word.endswith(ending):
            return True
    
    # Глаголы с типичными суффиксами
    if any(suffix in word for suffix in ['ова', 'ева', 'ива', 'ыва']):
        return True
    
    # Глаголы с приставками
    verb_prefixes = ['по', 'за', 'под', 'над', 'от', 'до', 'про', 'пере', 'вы', 'в', 'с']
    for prefix in verb_prefixes:
        if word.startswith(prefix) and len(word) > len(prefix) + 2:
            return True
    
    return False

def filter_words_by_conditions(words: Set[str]) -> List[str]:
    """Фильтрует слова по заданным условиям"""
    # Запрещенные буквы
    forbidden_letters = {'с', 'л', 'о', 'а', 'х', 'и'}
    
    # Доступные буквы (все русские буквы кроме запрещенных)
    all_russian_letters = set('абвгдеёжзийклмнопрстуфхцчшщъыьэюя')
    available_letters = all_russian_letters - forbidden_letters
    
    filtered_words = []
    
    for word in words:
        if len(word) != 5:
            continue
            
        # Проверяем, что слово содержит только доступные буквы
        if not all(letter in available_letters for letter in word):
            continue
        
        # Проверяем, что в слове есть буква "В"
        if 'в' not in word:
            continue
        
        # Проверяем, что буква "В" не на четвертой и пятой позиции
        if word[3] == 'в' or word[4] == 'в':
            continue
        
        # Проверяем, что в слове есть буква "Р" на второй позиции
        if word[1] != 'р':
            continue
            
        # Проверяем, что слово является существительным
        if not is_noun(word):
            continue
        
        # Дополнительная проверка на глаголы
        if is_verb(word):
            continue
        
        filtered_words.append(word)
    
    return sorted(filtered_words)

def generate_possible_words() -> List[str]:
    """Генерирует возможные слова по условиям"""
    # Базовые доступные буквы (исключая запрещенные: с, л, о, а, х, и)
    available_letters = {'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'й', 'к', 'м', 'н', 'п', 'р', 'т', 'у', 'ф', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'}
    
    possible_words = []
    
    # Генерируем все возможные комбинации с обязательными буквами "В" и "Р"
    for l1 in available_letters:
        for l2 in available_letters:
            for l3 in available_letters:
                for l4 in available_letters:
                    for l5 in available_letters:
                        word = l1 + l2 + l3 + l4 + l5
                        # Проверяем, что в слове есть буква "В" с позиционными ограничениями и "Р" на 2-й позиции
                        if ('в' in word and word[3] != 'в' and word[4] != 'в' and 
                            word[1] == 'р'):
                            possible_words.append(word)
    
    return sorted(list(set(possible_words)))

def save_words_to_file(words: List[str], filename: str, title: str):
    """Сохраняет список слов в файл"""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"{title}\n")
        f.write("=" * 50 + "\n")
        f.write(f"Всего найдено: {len(words)}\n")
        f.write("=" * 50 + "\n\n")
        
        for i, word in enumerate(words, 1):
            f.write(f"{i:4d}. {word}\n")
    
    print(f"💾 Сохранено в файл: {filename}")

def main():
    print("🎯 Генератор слов по условиям")
    print("=" * 50)
    print("Условия:")
    print("- Слово из 5 букв")
    print("- НЕ используются: С, Л, О, А, Х, И")
    print("- Обязательно есть буква В")
    print("- Буква В не на 4-й и 5-й позиции")
    print("- Буква Р обязательно на 2-й позиции")
    print("- Слово должно быть существительным")
    print("- Слово НЕ может быть глаголом")
    print("=" * 50)
    
    # Получаем словарь
    print("📚 Загружаем русский словарь...")
    dictionary_words = get_russian_words()
    print(f"Загружено {len(dictionary_words)} слов из словаря")
    
    # Фильтруем слова по условиям
    print("\n🔍 Фильтруем слова по условиям...")
    filtered_words = filter_words_by_conditions(dictionary_words)
    
    print(f"\n✅ Найдено {len(filtered_words)} слов из словаря")
    
    # Сохраняем слова из словаря
    if filtered_words:
        save_words_to_file(filtered_words, "слова_из_словаря.txt", "Слова из словаря, соответствующие условиям")
        print("Первые 20 слов:")
        for i, word in enumerate(filtered_words[:20], 1):
            print(f"{i:2d}. {word}")
        if len(filtered_words) > 20:
            print(f"... и еще {len(filtered_words) - 20} слов (см. файл)")
    else:
        print("Слова из словаря не найдены")
    
    # Генерируем все возможные комбинации
    print("\n🎲 Генерируем все возможные комбинации...")
    possible_combinations = generate_possible_words()
    
    print(f"\n🔢 Всего возможных комбинаций: {len(possible_combinations)}")
    print("Первые 20 комбинаций:")
    for i, word in enumerate(possible_combinations[:20], 1):
        print(f"{i:2d}. {word}")
    
    if len(possible_combinations) > 20:
        print(f"... и еще {len(possible_combinations) - 20} комбинаций")
    
    # Сохраняем все комбинации
    save_words_to_file(possible_combinations, "все_комбинации.txt", "Все возможные комбинации букв")
    
    # Проверяем, какие из сгенерированных комбинаций есть в словаре и являются существительными
    print("\n📖 Проверяем, какие комбинации есть в словаре и являются существительными...")
    real_nouns = [word for word in possible_combinations if word in dictionary_words and is_noun(word)]
    
    print(f"\n📚 Найдено {len(real_nouns)} реальных существительных")
    
    # Сохраняем реальные существительные
    if real_nouns:
        save_words_to_file(real_nouns, "реальные_существительные.txt", "Реальные существительные из комбинаций")
        print("Первые 20 существительных:")
        for i, word in enumerate(real_nouns[:20], 1):
            print(f"{i:2d}. {word}")
        if len(real_nouns) > 20:
            print(f"... и еще {len(real_nouns) - 20} существительных (см. файл)")
    else:
        print("Реальных существительных не найдено")
    
    print("\n🎉 Готово! Все результаты сохранены в файлы:")
    print("- слова_из_словаря.txt")
    print("- все_комбинации.txt") 
    print("- реальные_существительные.txt")

if __name__ == "__main__":
    main() 